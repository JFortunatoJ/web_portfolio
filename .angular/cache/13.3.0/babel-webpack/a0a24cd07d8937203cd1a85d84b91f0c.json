{"ast":null,"code":"import { Keyboard } from './Keyboard';\nexport class Character extends Phaser.GameObjects.Sprite {\n  constructor(scene, x, y, texture, frame) {\n    super(scene, x, y, texture, frame);\n    this.speed = 2;\n    this.jumpForce = 400;\n    this.isGrounded = false;\n    this.isFalling = false;\n    this.cameraOffsetVector = new Phaser.Math.Vector2(-400, 0);\n    this.scene = scene;\n    this.mainCamera = this.scene.cameras.main;\n    this.mainCamera.setBounds(0, 0, window.innerWidth, 400);\n    this.scene.add.existing(this);\n    this.scene.physics.add.existing(this);\n    this.body.gameObject.body.collideWorldBounds = true;\n    this.body.gameObject.body.setSize(20, 39);\n    this.setupAnimations();\n    this.keyManager = new Keyboard();\n    this.keyManager.addKey('ArrowRight', this.keyRightDown.bind(this), this.keyRightUp.bind(this));\n    this.keyManager.addKey('ArrowLeft', this.keyLeftDown.bind(this), this.keyLeftUp.bind(this));\n    this.keyManager.addKey('ArrowUp', this.spaceDown.bind(this));\n    this.scale = 2;\n  }\n\n  setupAnimations() {\n    this.scene.anims.create({\n      key: 'idle',\n      frames: this.scene.anims.generateFrameNames('character', {\n        start: 0,\n        end: 4,\n        zeroPad: 0,\n        prefix: 'characterIdle_',\n        suffix: '.png'\n      }),\n      repeat: -1,\n      frameRate: 7\n    });\n    this.scene.anims.create({\n      key: 'run',\n      frames: this.scene.anims.generateFrameNames('character', {\n        start: 0,\n        end: 5,\n        zeroPad: 0,\n        prefix: 'characterRun_',\n        suffix: '.png'\n      }),\n      repeat: -1,\n      frameRate: 11\n    });\n    this.scene.anims.create({\n      key: 'jump',\n      frames: this.scene.anims.generateFrameNames('character', {\n        start: 0,\n        end: 1,\n        zeroPad: 0,\n        prefix: 'characterJump_',\n        suffix: '.png'\n      }),\n      repeat: 1,\n      frameRate: 11\n    });\n    this.scene.anims.create({\n      key: 'fall',\n      frames: this.scene.anims.generateFrameNames('character', {\n        start: 0,\n        end: 1,\n        zeroPad: 0,\n        prefix: 'characterFall_',\n        suffix: '.png'\n      }),\n      repeat: 1,\n      frameRate: 11\n    });\n  }\n\n  update(deltaTime) {\n    this.Move(this.body.velocity.x, this.body.velocity.y, deltaTime);\n    this.fallingCheck();\n\n    if (!this.isGrounded && this.body.velocity.y > 0) {\n      this.body.velocity.y += 10;\n    }\n\n    this.mainCamera.followOffset.lerp(this.cameraOffsetVector, 0.025);\n  }\n\n  fallingCheck() {\n    if (!this.isGrounded && !this.isFalling && this.body.velocity.y > 0) {\n      this.isFalling = true;\n      this.play('fall');\n      this.body.velocity.y += 100;\n    }\n  }\n\n  keyRightDown() {\n    if (this.flipX) {\n      this.flipX = false;\n      this.cameraOffsetVector.x = -400;\n    }\n\n    this.Run(this.speed, 1);\n  }\n\n  keyRightUp() {\n    this.body.velocity.x = 0;\n    this.Idle();\n  }\n\n  keyLeftDown() {\n    if (!this.flipX) {\n      this.flipX = true;\n      this.cameraOffsetVector.x = 400;\n    }\n\n    this.Run(this.speed, -1);\n  }\n\n  keyLeftUp() {\n    this.body.velocity.x = 0;\n    this.Idle();\n  }\n\n  spaceDown() {\n    this.Jump();\n  }\n\n  Idle() {\n    this.play('idle');\n    this.anims.frameRate = 5;\n  }\n\n  Run(speed, direction) {\n    this.body.velocity.x = speed * direction;\n\n    if (!this.isGrounded) {\n      return;\n    }\n\n    this.play('run');\n    this.anims.currentAnim.frameRate = speed / 10;\n  }\n\n  Jump() {\n    if (!this.isGrounded) {\n      return;\n    }\n\n    this.isGrounded = false;\n    this.body.velocity.y = -this.jumpForce;\n    this.play('jump');\n  }\n\n  setGrounded() {\n    if (this.isGrounded) {\n      return;\n    }\n\n    this.isGrounded = true;\n    this.isFalling = false;\n\n    if (this.body.velocity.x !== 0) {\n      this.play('run');\n    } else {\n      this.play('idle');\n    }\n  }\n\n  Move(x, y, deltaTime) {\n    let targetX = this.x + x * deltaTime * this.speed; //if (targetX >= 0 && targetX <= this.app.renderer.width) {\n\n    this.x = targetX; //}\n\n    let targetY = this.y + y * deltaTime * this.speed; //if (targetY >= 0 && targetY <= this.app.renderer.height) {\n    //this.character.y += y * deltaTime * this.speed;\n    //}\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}