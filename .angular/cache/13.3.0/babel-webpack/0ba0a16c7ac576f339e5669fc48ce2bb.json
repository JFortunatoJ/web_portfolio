{"ast":null,"code":"export class Keyboard {\n  constructor() {\n    this.keyList = [];\n    this.addEventListeners();\n  }\n\n  addEventListeners() {\n    window.addEventListener('keydown', this.downHandler.bind(this), false);\n    window.addEventListener('keyup', this.upHandler.bind(this), false);\n  }\n\n  removeEventListeners() {\n    window.removeEventListener('keydown', this.downHandler);\n    window.removeEventListener('keyup', this.upHandler);\n  }\n\n  addKey(value, pressed = undefined, released = undefined) {\n    const key = {\n      keyID: value,\n      isDown: false,\n      isUp: true,\n      press: pressed,\n      release: released\n    };\n    this.keyList.push(key);\n    return key;\n  }\n\n  removeKey(value) {\n    const index = this.keyList.indexOf(value);\n\n    if (index !== -1) {\n      this.keyList.splice(index, 1);\n    }\n  }\n\n  downHandler(event) {\n    for (let i = 0; i < this.keyList.length; i++) {\n      let key = this.keyList[i];\n\n      if (event.key === key.keyID) {\n        if (key.isUp && key.press) {\n          key.press();\n        }\n\n        key.isDown = true;\n        key.isUp = false;\n        event.preventDefault();\n        break;\n      }\n    }\n  }\n\n  upHandler(event) {\n    for (let i = 0; i < this.keyList.length; i++) {\n      let key = this.keyList[i];\n\n      if (event.key === key.keyID) {\n        if (key.isDown && key.release) {\n          key.release();\n        }\n\n        key.isDown = false;\n        key.isUp = true;\n        event.preventDefault();\n        break;\n      }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}